# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS
#
version: 2.1
defaults:
  docker_login: &docker_login
      run:
          name: Login to Dockerhub
          command: |
              if [ "${DOCKER_USER}" == "" ] || [ "${DOCKER_PASS}" == "" ]; then
                  echo "Skipping Login to Dockerhub, no credentials."
              else
                  echo "${DOCKER_PASS}" | docker login -u="${DOCKER_USER}" --password-stdin
              fi
jobs:
  build:
    docker:
      - image: docker:18.03.1-ce
    working_directory: /dockerflow
    steps:
      - run:
          name: Install Docker build dependencies
          command: apk add --no-cache openssh-client git

      - checkout
      - setup_remote_docker
      - *docker_login

      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

      - run:
          name: Build PyPy Docker image
          command: docker build -t app:buildpypy .
      - run:
          name: Build CPython Docker image
          command: docker build -t app:buildcpy .

      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save app:buildpypy
          command: mkdir -p /cache; docker save -o /cache/dockerpypy.tar "app:buildpypy"
      - run:
          name: docker save app:buildcpy
          command: docker save -o /cache/dockercpy.tar "app:buildcpy"
      - save_cache:
          key: v1-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}-{{ epoch }}
          paths:
            - /cache/dockerpypy.tar
            - /cache/dockercpy.tar

  deploy:
    docker:
      - image: docker:18.03.1-ce
    steps:
      - setup_remote_docker
      - *docker_login
      - restore_cache:
          key: v1-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: Restore PyPy Docker image cache
          command: docker load -i /cache/dockerpypy.tar
      - run:
          name: Restore CPython Docker image cache
          command: docker load -i /cache/dockercpy.tar

      - run:
          name: Deploy to Dockerhub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag app:buildpypy ${DOCKERHUB_REPO}:latest-pypy
              docker tag app:buildcpy ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest-pypy
              docker push ${DOCKERHUB_REPO}:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag app:buildpypy "${DOCKERHUB_REPO}:${CIRCLE_TAG}-pypy"
              docker tag app:buildcpy "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}-pypy"
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /.*/
            branches:
              only: master
